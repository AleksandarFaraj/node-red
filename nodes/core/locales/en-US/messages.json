{
    "common": {
        "label": {
            "payload": "Payload",
            "topic": "Topic",
            "topicph": "topic",
            "name": "Name",
            "nameph": "name",
            "username": "Username",
            "password": "Password"
        },
        "status": {
            "connected": "connected",
            "not-connected": "not connected",
            "disconnected": "disconnected",
            "requesting": "requesting",
            "unknown": "unknown"
        }
    },
    "inject": {
        "inject":"inject",
        "repeat": "repeat = __repeat__",
        "crontab": "crontab = __crontab__",
        "stopped": "stopped",
        "failed": "Inject failed: __error__",
        
        "label": {
            "repeat": "Repeat"
        },
        "timestamp": "timestamp",
        "string": "string",
        "blank": "blank",
        "none":"none",
        "interval":"interval",
        "interval-time":"interval between times",
        "time":"at a specific time",
        "seconds":"seconds",
        "minutes":"minutes",
        "hours":"hours",
        "between":"between",
        "at":"at",
        "and":"and",
        "every":"every",
        "days": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
        ],
        "on":"on",
        "onstart":"Inject once at start?",
        "tip": "<b>Note:</b> \"interval between times\" and \"at a specific time\" will use cron.<br/>See info box for details.",
        "success": "Successfully injected: __label__",
        "error": "<strong>Error</strong>: __message__",
        "errors": {
            "not-deployed": "inject node not deployed",
            "failed": "inject failed, see log for details",
            "no-response": "no response from server",
            "unexpected": "unexpected error (__status__) __message__"
        }
    },
    "catch": {
        "catch": "catch"
    },
    "debug": {
        "debug": "debug",
        "output": "Output",
        "msgprop": "message property",
        "msgobj": "complete msg object",
        "to": "to",
        "debtab": "debug tab",
        "tabcon": "debug tab and console"
    },
    "exec": {
        "exec": "exec",
        "spawnerr": "Spawn command must be just the command - no spaces or extra parameters",
        "badstdout": "Bad STDOUT",
        "command": "Command",
        "commandph": "command",
        "append": "Append",
        "extraparams": "extra input parameters",
        "spawn": "Use spawn() instead of exec() ?",
        "tip": "Tip: <i>spawn</i> expects only one command word - and appended args to be comma separated."
    },
    "function": {
        "function": "function",
        "functionlabel": "Function",
        "outputs": "Outputs",
        "tip": "See the Info tab for help writing functions."
    },
    "template": {
        "template": "template",
        "templatelabel": "Template",
        "property": "Property",
        "templatevalue": "This is the payload: {{payload}} !"
    },
    "delay": {
        "delay": "delay",
        "action": "Action",
        "for": "For",
        "delaymsg": "Delay message",
        "ramdomdelay": "Random delay",
        "limitrate": "Limit rate to",
        "fairqueue": "Topic based fair queue",
        "milisecs": "Miliseconds",
        "secs": "Seconds",
        "sec": "Second",
        "mins": "Minutes",
        "min": "Minute",
        "hours": "Hours",
        "hour": "Hour",
        "days": "Days",
        "day": "Day",
        "between": "Between",
        "rate": "Rate",
        "msgper": "msg(s) per",
        "dropmsg": "drop intermediate messages",
        "delaylabel": "delay",
        "limitlabel": "limit",
        "randomlabel": "ramdom",
        "queuelabel": "queue",
        "msgperlabel": "msg/",
        "buffererr": "buffer exceeded 1000 messages"
    },
    "trigger": {
        "trigger": "trigger",
        "output1": "Output",
        "wait": "then wait",
        "output2": "output",
        "and": "and",
        "below": "the value below",
        "payload": "the existing payload",
        "nothing": "nothing (no output)",
        "milisecs": "Miliseconds",
        "secs": "Seconds",
        "mins": "Minutes",
        "hours": "Hours",
        "notext": "don't extend the timer if retriggered",
        "extend": "extend the timer if retriggered",
        "tip": "Setting the timeout to 0 sets an infinite timeout = single shot.",
        "triggerlabel": "trigger",
        "triggeroncelabel": "trigger once & infinite"
    },
    "comment": {
        "comment": "comment",
        "title": "Title",
        "body": "Body - will be rendered in info tab.",
        "tip1": "Tip: The text here can be styled as ",
        "tip2": "Github flavoured Markdown",
        "commentph": "comment",
        "commentnode": "Comment node",
        "commentinfo": "Use this node to add simple documentation.\n\nAnything you add will be rendered in this info panel.\n\nYou may use Markdown syntax to **enhance** the *presentation*."
    },
    "mqtt": {
        "mqtt": "mqtt",
        "label": {
            "broker": "Broker",
            "qos": "QoS",
            "clientid": "Client ID",
            "clientidph": "Leave blank for auto generated"
        },
        "retain": "Retain",
        "true": "true",
        "false": "false",
        "tip": "Tip: Leave topic, qos or retain blank if you want to set them via msg properties.",
        "port": "Port",
        "portph": "port",
        "errors": {
            "not-defined": "topic not defined",
            "missing-config": "missing broker configuration",
            "invalid-topic": "Invalid topic specified"
        }
    },
    "httpin": {
        "httpin": "httpin",
        "label": {
            "method": "Method",
            "url": "URL",
            "urlph": "/url",
            "httpph": "http://",
            "doc": "Doc",
            "return": "Return"
        },
        "setby": "- set by msg.method -",
        "basicauth": "Use basic authentication ?",
        "utf8": "a UTF-8 string",
        "binary": "a binary buffer",
        "json": "a parsed JSON object",
        "in-tip": "The url will be relative to ",
        "res-tip": "The messages sent to this node <b>must</b> originate from an <i>http input</i> node",
        "req-tip": "Tip: If the JSON parse fails the fetched string is returned as-is.",
        "httpreq": "http request",
        "errors": {
            "not-created": "Cannot create http-in node when httpNodeRoot set to false",
            "no-response": "No response object",
            "not-overridden": "Warning: msg properties can no longer override fixed node properties. Use explicit override option. See bit.ly/nr-override-msg-props",
            "json-error": "JSON parse error",
            "no-url": "No url specified"
        }
    },
    "websocket": {
        "websocket": "websocket",
        "label": {
            "type": "Type",
            "path": "Path",
            "url": "URL",
            "pathph": "/ws/example",
            "urlph": "ws://example.com/ws"
        },
        "listenon": "Listen on",
        "connectto": "Connect to",
        "payload": "Send/Receive payload",
        "message": "Send/Receive entire message",
        "path-tip1": "By default, <code>payload</code> will contain the data to be sent over, or received from a websocket. The listener can be configured to send or receive the entire message object as a JSON formatted string.",
        "path-tip2": "This path will be relative to ",
        "url-tip1": "URL should use ws:&#47;&#47; or wss:&#47;&#47; scheme and point to an existing websocket listener.",
        "url-tip2": "By default, <code>payload</code> will contain the data to be sent over, or received from a websocket. The client can be configured to send or receive the entire message object as a JSON formatted string.",
        "errors": {
            "connect-error": "An error occured on the ws connection: ",
            "send-error": "An error occurred while sending: ",
            "missing-conf": "Missing server configuration"
        }
    },
    "watch": {
        "watch": "watch",
        "label": {
            "files": "File(s)",
            "filesph": "File(s) or Directory"
        },
        "tip": "On Windows you must use double back-slashes \\\\ in any directory names."
    },
    "serial": {
        "serial": "serial",
        "label": {
            "serialport": "Serial Port",
            "serialportph": "/dev/ttyUSB0/",
            "settings": "Settings",
            "baudrate": "Baud Rate",
            "databits": "Data Bits",
            "parity": "Parity",
            "stopbits": "Stop Bits",
            "input": "Input",
            "split": "Split input",
            "deliver": "and deliver",
            "output": "Output",
            "serial": "serial",
            "none": "none"
        },
        "none": "None",
        "even": "Even",
        "mark": "Mark",
        "odd": "Odd",
        "space": "Space",
        "character": "on the character",
        "timeout": "after a timeout of",
        "length": "into fixed lengths of",
        "ascii": "ascii strings",
        "binary": "binary buffers",
        "addsplit": "add split character to output messages",
        "split-tip": "Tip: the \"Split on\" character is used to split the input into separate messages. It can also be added to every message sent out to the serial port.",
        "timeout-tip": "Tip: In timeout mode timeout starts from arrival of first character.",
        "errors": {
            "missing-conf": "missing serial config",
            "never-get": "should never get here",
            "serial-port": "serial port",
            "error": "error",
            "unexpected-close": "closed unexpectedly",
            "opened": "opened at",
            "baud": "baud",
            "gone-away": "gone away",
            "closed": "closed"
        }
    }
}
